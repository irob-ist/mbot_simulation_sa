<?xml version="1.0"?>
<robot>
  <gazebo>
    <!-- neck, head, odometry controllers -->
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so" />

    <!-- base controller, listen to cmd_vel and transform into force that will be applied to the robot -->
    <plugin name="ridgeback_ros_force_based_move" filename="libridgeback_ros_force_based_move.so">
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom_diff</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <odometryRate>50.0</odometryRate>
      <robotBaseFrame>base_link</robotBaseFrame>
      <cmdVelTimeOut>1.0</cmdVelTimeOut>
      <!-- Don't publish a transform: the p3d_base_controller does it. -->
      <publishOdometryTf>0</publishOdometryTf>
      <yaw_velocity_p_gain>100000.0</yaw_velocity_p_gain>
      <x_velocity_p_gain>100000.0</x_velocity_p_gain>
      <y_velocity_p_gain>100000.0</y_velocity_p_gain>
    </plugin>

    <!-- publish perfect odometry as ground truth taken from gazebo/models/pose -->
    <plugin name="p3d_base_controller" filename="libmbot_gazebo_ros_p3d.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>50.0</updateRate>
      <bodyName>base_link</bodyName>
      <topicName>odom_gt</topicName>
      <gaussianNoise>0.0</gaussianNoise> <!-- 0.01 if you want to add noise-->
      <frameName>world</frameName> <!-- gazebo frame! not robot frame -->
      <xyzOffsets>0 0 0</xyzOffsets>
      <rpyOffsets>0 0 0</rpyOffsets>
    </plugin>

    <!-- IMU simulation plugin config -->
    <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
      <updateRate>50.0</updateRate>
      <bodyName>imu_link</bodyName>
      <topicName>imu/data</topicName>
      <accelDrift>0.005 0.005 0.005</accelDrift>
      <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
      <rateDrift>0.00005 0.00005 0.00005</rateDrift>
      <rateGaussianNoise>0.00005 0.00005 0.00005</rateGaussianNoise>
      <headingDrift>0.005</headingDrift>
      <headingGaussianNoise>0.005</headingGaussianNoise>
    </plugin>
  </gazebo>

  <!-- All static links get collapsed down to base_link in Gazebo, so that's
       the one to apply the colour to (in Gazebo 5+). -->
  <gazebo reference="base_link">
    <material>Gazebo/DepthMapVS</material>
    <gravity>true</gravity>
  </gazebo>

  <gazebo reference="head_link">
    <material>Gazebo/DepthMapVS</material>
    <gravity>true</gravity>
  </gazebo>

  <!-- Wheel friction -->
  <gazebo reference="front_left_wheel_link">
    <material>Gazebo/DarkGrey</material>
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
  </gazebo>

  <gazebo reference="front_right_wheel_link">
    <material>Gazebo/DarkGrey</material>
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
  </gazebo>

  <gazebo reference="rear_left_wheel_link">
    <material>Gazebo/DarkGrey</material>
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
  </gazebo>

  <gazebo reference="rear_right_wheel_link">
    <material>Gazebo/DarkGrey</material>
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
  </gazebo>

  <!-- Refer to Hokuyo URG-04LX-UG01 datasheet & /scan_front topic on real mbot-->
  <gazebo reference="base_laser_front_link">
    <sensor type="ray" name="front_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>4.3</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>512</samples>
            <resolution>1</resolution>
            <min_angle>-1.5707963</min_angle><!-- restricted due to base shelf -->
            <max_angle>1.5707963</max_angle>
          </horizontal>
        </scan>
          <range>
            <min>0.0199999</min>
            <max>5.6</max>
            <resolution>0.001</resolution> <!-- res 1mm, accuracy between +-30mm to 120mm -->
          </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_front_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan_front</topicName>
        <frameName>base_laser_front_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Specs from Hokuyo UTM-30LX datasheet & /scan_rear topic on real mbot-->
  <gazebo reference="base_laser_rear_link">
    <sensor type="ray" name="rear_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>34.5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.023</min>
          <max>60.0</max><!-- to be verified, mbot$ rostopic echo /scan_rear range_max -60.0m, datasheet -30.0m -->
          <resolution>0.001</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_rear_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan_rear</topicName>
        <frameName>base_laser_rear_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

</robot>
